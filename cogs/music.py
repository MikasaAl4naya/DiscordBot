import asyncio
import random
from datetime import datetime

import discord
import typing
import wavelink
from discord.ext import commands
from typing import cast
class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        bot.loop.create_task(self.create_nodes())
        # –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.queues = {}
        self.current_queue_messages = {}

    async def create_nodes(self):
        await self.bot.wait_until_ready()
        await wavelink.NodePool.create_node(bot=self.bot, host="localhost", port=2333, password="youshallnotpass", region="russia")

    @commands.Cog.listener()
    async def on_wavelink_node_ready(self, node: wavelink.Node):
        print(f"Node <{node.identifier}> is now Ready!")

    @commands.command(name="join", aliases=["connect", "summon"])
    async def join_command(self, ctx: commands.Context, channel: typing.Optional[discord.VoiceChannel]):
        if channel is None:
            channel = ctx.author.voice.channel

        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is not None:
            if player.is_connected():
                return await ctx.send("–ë–æ—Ç —É–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ")

        await channel.connect(cls=wavelink.Player)
        mbed = discord.Embed(title=f"Connected to {channel.name}", color=discord.Color.from_rgb(255, 255, 255))
        await ctx.send(embed=mbed)

    @commands.command(name="leave", alises=["disconnect"])
    async def leave_command(self, ctx: commands.Context):
        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is None:
            return await ctx.reply("–í –∫–∞–Ω–∞–ª –∑–∞–π–¥–∏")

        await player.disconnect()
        mbed = discord.Embed(title="Disconnected", color=discord.Color.from_rgb(255, 255, 255))
        await ctx.send(embed=mbed)

    @commands.command(aliases=['Play', 'PLAY', '–∏–≥—Ä–∞–π', '–ò–ì–†–ê–ô', '–ò–≥—Ä–∞–π', '—Å—ã–≥—Ä–∞–π',
                          '–°—ã–≥—Ä–∞–π', '–°–´–ì–†–ê–ô', '–∑–¥—Ñ–Ω', '–ó–¥—Ñ–Ω', '–ó–î–§–ù', 'p', 'P',
                          'pl', 'PL', 'Pl', '–∑', '–ó', '–∑–¥', '–ó–î', '–ó–¥', '–ü–ª–µ–π',
                          '–ü–õ–ï–ô', '–ø–ª–µ–π'])
    async def play(self, ctx: commands.Context, *, search: str):
        if not ctx.voice_client:
            vc: wavelink.Player = await ctx.author.voice.channel.connect(cls=wavelink.Player)
        else:
            vc: wavelink.Player = ctx.voice_client

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        if ctx.guild.id not in self.queues:
            self.queues[ctx.guild.id] = asyncio.Queue()

        # –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        tracks = await wavelink.YouTubeTrack.search(query=search)

        # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –µ–≥–æ —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        if isinstance(tracks, wavelink.YouTubePlaylist):
            for track in tracks.tracks:
                await self.queues[ctx.guild.id].put(track)
        elif isinstance(tracks, wavelink.YouTubeTrack):
            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
            await self.queues[ctx.guild.id].put(tracks)
        # –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–Ω–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        if not vc.is_playing():
            await self.play_queue(ctx, vc)

    async def play_queue(self, ctx, vc):
        # –ü–æ–ª—É—á–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        queue = self.queues[ctx.guild.id]
        # –ü–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏—Ö
        while not queue.empty():
            # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            track = await queue.get()
            # –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—Ä–µ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º)
            queue.put_nowait(track)
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫
            await vc.play(track)
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if ctx.guild.id in self.current_queue_messages:

                await self.current_queue_messages[ctx.guild.id].delete()

            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
            await self.queue(ctx)
            # –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            while vc.is_playing():
                await asyncio.sleep(1)
            # –¢—Ä–µ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await queue.get()
        # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã, –æ—Ç–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        await vc.disconnect()

    @commands.command(aliases=['Queue', 'QUEUE', '–π–≥—É–≥—É', '–ô–≥—É–≥—É', '–ô–ì–£–ì–£', '–æ—á–µ—Ä–µ–¥—å',
                               '–û—á–µ—Ä–µ–¥—å', '–û–ß–ï–†–ï–î–¨', '—Å–ø–∏—Å–æ–∫', '–°–ø–∏—Å–æ–∫', '–°–ü–ò–°–û–ö',
                               'list', 'List', 'LIST', '–¥—à—ã–µ', '–î—à—ã–µ', '–î–®–´–ï', '–õ–∏—Å—Ç',
                               '–ª–∏—Å—Ç', '–õ–ò–°–¢', '–ø–µ—Å–Ω–∏', '–ü–µ—Å–Ω–∏', '–ü–ï–°–ù–ò', 'songs',
                               'Songs', 'SONGS', '—ã—â—Ç–ø—ã', '–´–©–¢–ü–´', '–´—â—Ç–ø—ã', 'q'])
    async def queue(self, ctx: commands.Context):
        """Show the current queue."""
        # –ü–æ–ª—É—á–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        queue = self.queues.get(ctx.guild.id)
        if not queue or queue.empty():
            return await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

        # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –±–µ–∑ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        current_track = await queue.get()
        queue.put_nowait(current_track)

        # –ü–æ–ª—É—á–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ 5 —Ç—Ä–µ–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        next_tracks = [
            track for _, track in zip(range(5), iter(queue._queue))
        ]

        # –°–æ–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        tracks = [
            f"{index + 1}. {track.title} - {str(int(track.duration // 60))}:{str(int(track.duration) % 60).zfill(2)}"
            for index, track in enumerate(next_tracks)
        ]

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥—å—é –≤ –≤–∏–¥–µ Embed
        embed = discord.Embed(title="–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å",
                              color=discord.Color.from_rgb(52, 152, 219))  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É

        # –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∫—Ä—É–ø–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å —ç–º–æ–¥–∑–∏
        embed.add_field(name="üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                        value=f"**{current_track.title}** - *{str(int(current_track.duration // 60))}:{str(int(current_track.duration) % 60).zfill(2)}*",
                        inline=False)

        # –î–æ–±–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
        embed.add_field(name="üìú –û—á–µ—Ä–µ–¥—å", value="\n".join(tracks), inline=False)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏–º –µ–≥–æ
        if ctx.guild.id in self.current_queue_messages:
            try:
                await self.current_queue_messages[ctx.guild.id].delete()
            except discord.NotFound:
                pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥—å—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        self.current_queue_messages[ctx.guild.id] = await ctx.send(embed=embed)

    @commands.command(name="stop")
    async def stop_command(self, ctx: commands.Context):
        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is None:
            return await ctx.reply("–í –∫–∞–Ω–∞–ª –∑–∞–π–¥–∏")

        if player.is_playing:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
            await player.stop()

            # –û—á–∏—Å—Ç–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å
            queue = self.queues.get(ctx.guild.id)
            if queue:
                queue._queue.clear()

            # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            mbed = discord.Embed(title="–°—Ç–æ–ø–∞–Ω—É–ª", color=discord.Color.from_rgb(255, 255, 255))
            return await ctx.send(embed=mbed)
        else:
            return await ctx.send("–ù–∏—á–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç —Å–µ–π—á–∞—Å")

    @commands.command(name="pause")
    async def pause_command(self, ctx: commands.Context):
        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is None:
            return await ctx.reply("–í –∫–∞–Ω–∞–ª –∑–∞–π–¥–∏")

        if not player.is_paused():
            if player.is_playing():
                await player.pause()
                mbed = discord.Embed(title="–ù–∞ –ø–∞—É–∑–µ", color=discord.Color.from_rgb(255, 255, 255))
                return await ctx.send(embed=mbed)
            else:
                return await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
        else:
            return await ctx.send("–£–∂–µ –Ω–∞ –ø–∞—É–∑–µ –¥–∞–¥–∞ —è")

    @commands.command(name="resume")
    async def resume_command(self, ctx: commands.Context):
        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is None:
            return await ctx.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")

        if player.is_paused():
            await player.resume()
            mbed = discord.Embed(title="–ü—Ä–æ–¥–æ–ª–∂–∏–ª", color=discord.Color.from_rgb(255, 255, 255))
            return await ctx.send(embed=mbed)
        else:
            return await ctx.send("–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞ –ø–∞—É–∑–µ")

    @commands.command(name="volume")
    async def volume_command(self, ctx: commands.Context, to: int):
        if to > 100:
            return await ctx.send("–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
        elif to < 1:
            return await ctx.send("–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")

        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        await player.set_volume(to)
        mbed = discord.Embed(title=f"–¢–µ–ø–µ—Ä—å –≥—Ä–æ–º–∫–æ—Å—Ç—å {to}", color=discord.Color.from_rgb(255, 255, 255))
        await ctx.send(embed=mbed)

    @commands.command(aliases=['sk', 'next', '—Å–ª–µ–¥—É—é—â–∞—è', '—Å–∫–∏–ø', '—Å–∫–∏–ø–Ω—É—Ç—å'])
    async def skip(self, ctx: commands.Context):
        node = wavelink.NodePool.get_node()
        player = node.get_player(ctx.guild)

        if player is None:
            return await ctx.reply("–í –∫–∞–Ω–∞–ª –∑–∞–π–¥–∏")

        if player.is_playing:
            await player.stop()
            mbed = discord.Embed(title="–ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫", color=discord.Color.from_rgb(255, 255, 255))
            await ctx.send(embed=mbed)
        else:
            return await ctx.send("–ù–∏—á–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç —Å–µ–π—á–∞—Å")

    @commands.command(name="shuffle")
    async def shuffle_command(self, ctx: commands.Context):
        """Shuffle the music queue."""
        # –ü–æ–ª—É—á–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        queue = self.queues.get(ctx.guild.id)
        if not queue or queue.empty():
            return await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

        # –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—Ä–µ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        tracks_to_shuffle = list(queue._queue)
        random.shuffle(tracks_to_shuffle)

        # –û—á–∏—Å—Ç–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
        queue._queue.clear()
        for track in tracks_to_shuffle:
            await queue.put(track)

        await ctx.send("–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞.")

async def setup(client):
  await client.add_cog(Music(client))